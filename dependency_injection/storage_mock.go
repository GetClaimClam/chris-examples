// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/chr1sbest/api.mobl.ai/internal/storage/model"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AcceptFriendRequest provides a mock function with given fields: ctx, email, friendRequestID
func (_m *Storage) AcceptFriendRequest(ctx context.Context, email string, friendRequestID string) error {
	ret := _m.Called(ctx, email, friendRequestID)

	if len(ret) == 0 {
		panic("no return value specified for AcceptFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, friendRequestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AcceptRoutineShare provides a mock function with given fields: ctx, email, routineShareID
func (_m *Storage) AcceptRoutineShare(ctx context.Context, email string, routineShareID string) error {
	ret := _m.Called(ctx, email, routineShareID)

	if len(ret) == 0 {
		panic("no return value specified for AcceptRoutineShare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, routineShareID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateEmailRecord provides a mock function with given fields: ctx, email, userAgent
func (_m *Storage) CreateEmailRecord(ctx context.Context, email string, userAgent string) error {
	ret := _m.Called(ctx, email, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmailRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, userAgent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateExerciseStreakRecord provides a mock function with given fields: ctx, email, routine
func (_m *Storage) CreateExerciseStreakRecord(ctx context.Context, email string, routine *model.Routine) (*model.ExerciseStreakRecord, error) {
	ret := _m.Called(ctx, email, routine)

	if len(ret) == 0 {
		panic("no return value specified for CreateExerciseStreakRecord")
	}

	var r0 *model.ExerciseStreakRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Routine) (*model.ExerciseStreakRecord, error)); ok {
		return rf(ctx, email, routine)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Routine) *model.ExerciseStreakRecord); ok {
		r0 = rf(ctx, email, routine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExerciseStreakRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.Routine) error); ok {
		r1 = rf(ctx, email, routine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFriend provides a mock function with given fields: ctx, email, friend
func (_m *Storage) CreateFriend(ctx context.Context, email string, friend *model.Friend) (*model.Friend, error) {
	ret := _m.Called(ctx, email, friend)

	if len(ret) == 0 {
		panic("no return value specified for CreateFriend")
	}

	var r0 *model.Friend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Friend) (*model.Friend, error)); ok {
		return rf(ctx, email, friend)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Friend) *model.Friend); ok {
		r0 = rf(ctx, email, friend)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Friend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.Friend) error); ok {
		r1 = rf(ctx, email, friend)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFriendRequest provides a mock function with given fields: ctx, frq
func (_m *Storage) CreateFriendRequest(ctx context.Context, frq *model.FriendRequest) error {
	ret := _m.Called(ctx, frq)

	if len(ret) == 0 {
		panic("no return value specified for CreateFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FriendRequest) error); ok {
		r0 = rf(ctx, frq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePurchase provides a mock function with given fields: ctx, purchase
func (_m *Storage) CreatePurchase(ctx context.Context, purchase *model.Purchase) error {
	ret := _m.Called(ctx, purchase)

	if len(ret) == 0 {
		panic("no return value specified for CreatePurchase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Purchase) error); ok {
		r0 = rf(ctx, purchase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRoutine provides a mock function with given fields: ctx, email, routine
func (_m *Storage) CreateRoutine(ctx context.Context, email string, routine *model.Routine) (*model.Routine, error) {
	ret := _m.Called(ctx, email, routine)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoutine")
	}

	var r0 *model.Routine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Routine) (*model.Routine, error)); ok {
		return rf(ctx, email, routine)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Routine) *model.Routine); ok {
		r0 = rf(ctx, email, routine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Routine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.Routine) error); ok {
		r1 = rf(ctx, email, routine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoutineShare provides a mock function with given fields: ctx, frq
func (_m *Storage) CreateRoutineShare(ctx context.Context, frq *model.RoutineShare) (*model.RoutineShare, error) {
	ret := _m.Called(ctx, frq)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoutineShare")
	}

	var r0 *model.RoutineShare
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.RoutineShare) (*model.RoutineShare, error)); ok {
		return rf(ctx, frq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.RoutineShare) *model.RoutineShare); ok {
		r0 = rf(ctx, frq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RoutineShare)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.RoutineShare) error); ok {
		r1 = rf(ctx, frq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, name, email
func (_m *Storage) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	ret := _m.Called(ctx, name, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.User, error)); ok {
		return rf(ctx, name, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(ctx, name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBadges provides a mock function with given fields: ctx, email
func (_m *Storage) DeleteBadges(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBadges")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFriend provides a mock function with given fields: ctx, email, friendID
func (_m *Storage) DeleteFriend(ctx context.Context, email string, friendID string) error {
	ret := _m.Called(ctx, email, friendID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, friendID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFriendRequest provides a mock function with given fields: ctx, email, friendRequestID
func (_m *Storage) DeleteFriendRequest(ctx context.Context, email string, friendRequestID string) error {
	ret := _m.Called(ctx, email, friendRequestID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, friendRequestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoutine provides a mock function with given fields: ctx, email, id
func (_m *Storage) DeleteRoutine(ctx context.Context, email string, id string) error {
	ret := _m.Called(ctx, email, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoutine")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoutineShare provides a mock function with given fields: ctx, email, routineShareID
func (_m *Storage) DeleteRoutineShare(ctx context.Context, email string, routineShareID string) error {
	ret := _m.Called(ctx, email, routineShareID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoutineShare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, routineShareID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, email
func (_m *Storage) DeleteUser(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMostRecentPurchaseByUserID provides a mock function with given fields: ctx, userID
func (_m *Storage) GetMostRecentPurchaseByUserID(ctx context.Context, userID string) (*model.Purchase, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMostRecentPurchaseByUserID")
	}

	var r0 *model.Purchase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Purchase, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Purchase); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Purchase)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUserID provides a mock function with given fields: ctx, userID
func (_m *Storage) GetUserByUserID(ctx context.Context, userID string) (*model.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUserID")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementBadge provides a mock function with given fields: ctx, email, badge
func (_m *Storage) IncrementBadge(ctx context.Context, email string, badge string) (*model.Badge, error) {
	ret := _m.Called(ctx, email, badge)

	if len(ret) == 0 {
		panic("no return value specified for IncrementBadge")
	}

	var r0 *model.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Badge, error)); ok {
		return rf(ctx, email, badge)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Badge); ok {
		r0 = rf(ctx, email, badge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Badge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, badge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBadges provides a mock function with given fields: ctx, email
func (_m *Storage) ListBadges(ctx context.Context, email string) ([]*model.Badge, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ListBadges")
	}

	var r0 []*model.Badge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Badge, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Badge); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Badge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFriendRequests provides a mock function with given fields: ctx, email
func (_m *Storage) ListFriendRequests(ctx context.Context, email string) ([]*model.FriendRequest, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ListFriendRequests")
	}

	var r0 []*model.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.FriendRequest, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.FriendRequest); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFriends provides a mock function with given fields: ctx, email
func (_m *Storage) ListFriends(ctx context.Context, email string) ([]*model.Friend, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ListFriends")
	}

	var r0 []*model.Friend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Friend, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Friend); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Friend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOutgoingFriendRequests provides a mock function with given fields: ctx, email
func (_m *Storage) ListOutgoingFriendRequests(ctx context.Context, email string) ([]*model.FriendRequest, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ListOutgoingFriendRequests")
	}

	var r0 []*model.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.FriendRequest, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.FriendRequest); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOutgoingRoutineShares provides a mock function with given fields: ctx, email
func (_m *Storage) ListOutgoingRoutineShares(ctx context.Context, email string) ([]*model.RoutineShare, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ListOutgoingRoutineShares")
	}

	var r0 []*model.RoutineShare
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.RoutineShare, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.RoutineShare); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RoutineShare)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoutineShares provides a mock function with given fields: ctx, email
func (_m *Storage) ListRoutineShares(ctx context.Context, email string) ([]*model.RoutineShare, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ListRoutineShares")
	}

	var r0 []*model.RoutineShare
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.RoutineShare, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.RoutineShare); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.RoutineShare)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoutines provides a mock function with given fields: ctx, email
func (_m *Storage) ListRoutines(ctx context.Context, email string) ([]model.Routine, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ListRoutines")
	}

	var r0 []model.Routine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Routine, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Routine); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Routine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFriend provides a mock function with given fields: ctx, email, friendID
func (_m *Storage) ReadFriend(ctx context.Context, email string, friendID string) (*model.Friend, error) {
	ret := _m.Called(ctx, email, friendID)

	if len(ret) == 0 {
		panic("no return value specified for ReadFriend")
	}

	var r0 *model.Friend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Friend, error)); ok {
		return rf(ctx, email, friendID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Friend); ok {
		r0 = rf(ctx, email, friendID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Friend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, friendID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFriendRequest provides a mock function with given fields: ctx, email, friendRequestID
func (_m *Storage) ReadFriendRequest(ctx context.Context, email string, friendRequestID string) (*model.FriendRequest, error) {
	ret := _m.Called(ctx, email, friendRequestID)

	if len(ret) == 0 {
		panic("no return value specified for ReadFriendRequest")
	}

	var r0 *model.FriendRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.FriendRequest, error)); ok {
		return rf(ctx, email, friendRequestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.FriendRequest); ok {
		r0 = rf(ctx, email, friendRequestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FriendRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, friendRequestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadRateLimit provides a mock function with given fields: ctx, key
func (_m *Storage) ReadRateLimit(ctx context.Context, key string) (int, int64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ReadRateLimit")
	}

	var r0 int
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, int64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int64); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReadRoutine provides a mock function with given fields: ctx, email, id
func (_m *Storage) ReadRoutine(ctx context.Context, email string, id string) (*model.Routine, error) {
	ret := _m.Called(ctx, email, id)

	if len(ret) == 0 {
		panic("no return value specified for ReadRoutine")
	}

	var r0 *model.Routine
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Routine, error)); ok {
		return rf(ctx, email, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Routine); ok {
		r0 = rf(ctx, email, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Routine)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadRoutineShare provides a mock function with given fields: ctx, email, routineShareID
func (_m *Storage) ReadRoutineShare(ctx context.Context, email string, routineShareID string) (*model.RoutineShare, error) {
	ret := _m.Called(ctx, email, routineShareID)

	if len(ret) == 0 {
		panic("no return value specified for ReadRoutineShare")
	}

	var r0 *model.RoutineShare
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.RoutineShare, error)); ok {
		return rf(ctx, email, routineShareID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.RoutineShare); ok {
		r0 = rf(ctx, email, routineShareID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RoutineShare)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, routineShareID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadUser provides a mock function with given fields: ctx, email
func (_m *Storage) ReadUser(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ReadUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectFriendRequest provides a mock function with given fields: ctx, email, friendRequestID
func (_m *Storage) RejectFriendRequest(ctx context.Context, email string, friendRequestID string) error {
	ret := _m.Called(ctx, email, friendRequestID)

	if len(ret) == 0 {
		panic("no return value specified for RejectFriendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, friendRequestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RejectRoutineShare provides a mock function with given fields: ctx, email, routineShareID
func (_m *Storage) RejectRoutineShare(ctx context.Context, email string, routineShareID string) error {
	ret := _m.Called(ctx, email, routineShareID)

	if len(ret) == 0 {
		panic("no return value specified for RejectRoutineShare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, routineShareID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFriend provides a mock function with given fields: ctx, email, friend
func (_m *Storage) UpdateFriend(ctx context.Context, email string, friend *model.Friend) error {
	ret := _m.Called(ctx, email, friend)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFriend")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Friend) error); ok {
		r0 = rf(ctx, email, friend)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastLoggedIn provides a mock function with given fields: ctx, email
func (_m *Storage) UpdateLastLoggedIn(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastLoggedIn")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePurchase provides a mock function with given fields: ctx, purchase
func (_m *Storage) UpdatePurchase(ctx context.Context, purchase *model.Purchase) error {
	ret := _m.Called(ctx, purchase)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePurchase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Purchase) error); ok {
		r0 = rf(ctx, purchase)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRoutine provides a mock function with given fields: ctx, email, id, routine
func (_m *Storage) UpdateRoutine(ctx context.Context, email string, id string, routine *model.Routine) error {
	ret := _m.Called(ctx, email, id, routine)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoutine")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *model.Routine) error); ok {
		r0 = rf(ctx, email, id, routine)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *Storage) UpdateUser(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteRateLimit provides a mock function with given fields: ctx, key, requestCount, ttl
func (_m *Storage) WriteRateLimit(ctx context.Context, key string, requestCount int, ttl int64) error {
	ret := _m.Called(ctx, key, requestCount, ttl)

	if len(ret) == 0 {
		panic("no return value specified for WriteRateLimit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int64) error); ok {
		r0 = rf(ctx, key, requestCount, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
